## Punto 1:

invertir(N,Invertd):- invertir(N,0,_,Invertd),!.

invertir(0,Acm1,Global,0):- Global is Acm1,!.

invertir(N,Acm,Global,Invertd):-
	N>0, Res is mod(N,10), CC is (N-Res)/10, Acm1 is Acm+1,
    invertir(CC, Acm1,Global,Invertd2),
    Invertd is (Res*(10**(Global-Acm1)))+Invertd2.

    
    
## Punto 2: 
invA(N, Acc, Res) :- N<10,Res is Acc*10 + N.
invA(N, Acc, Res) :-
    Dig is mod(N, 10),
    NewAcc is Acc * 10 + Dig,
    NewN is div(N, 10),
    invA(NewN, NewAcc, Res).

inv(N, Res) :-
    invA(N, 0, Res),!.

## Punto 3:
quitar(E,[N],[N]):- E\==N,!.
quitar(E,[N,M],[N]):- E==M,!.

quitar(E,L,Lr):- 
    L = [Lh|Lt], E==Lh, quitar(E,Lt,Lr1), Lr = Lr1,!.

quitar(E,L,Lr):- 
    L = [Lh|Lt], E \== Lh, quitar(E, Lt, Lr1), Lr=[Lh|Lr1],!.


## Punto 4:
%a
fibonacci(X,Y):- fibt(X,0,1,Y),!.
fibt(1,_,C1,Y):- Y is C1, !.
fibt(X,C,C1,Y):- X>1, X1 is X-1, C2 is C+C1, fibt(X1,C1,C2,Y).

 %b
 producto(X,Y,Z):- p_fac_tail(X,X,Y,Z), X>Y, !.
producto(X,Y,Z):- p_fac_tail(Y,Y,X,Z), Y>X, !.
producto(0,0,1):-!.
producto(X,Y,Z):- fac_cuadrado_tail(X,(X**2),Z), X=:=Y,!.


p_fac_tail(1, R, _, R):-!.

p_fac_tail(X, Ac, Y, R):- 
    X1 is X-1, X1>Y,  Ac1 is Ac*X1, p_fac_tail(X1, Ac1, Y, R).
p_fac_tail(X, Ac, Y, R):- 
    X1 is X-1, X1=:=Y,  Y1 is Y-1, Ac1 is Ac*(X1**2), p_fac_tail(X1, Ac1, Y1, R).

fac_cuadrado_tail(1,R,R1):- R1 is R,!.
fac_cuadrado_tail(X, Ac, R):-
    X1 is X-1, Ac1 is Ac*(X1**2), fac_cuadrado_tail(X1,Ac1,R).

## Punto 5:

num(1). 
num(2). 
num(3). 
num(4).

unicos(P,Q,R,S) :- num(P), num(Q), num(R), num(S),
\+ P=Q, \+ P=R, \+ P=S, \+ Q=R, \+ Q=S, \+ R=S.

sudoku( R11,R12,R13,R14,
		R21,R22,R23,R24,
      	R31,R32,R33,R34,
		R41,R42,R43,R44) :- 
    unicos(R11,R12,R21,R22), unicos(R13,R14,R23,R24), 
    unicos(R31,R32,R41,R42), unicos(R33,R34,R43,R44),
    unicos(R11,R12,R13,R14), unicos(R21,R22,R23,R24),
    unicos(R31,R32,R33,R34), unicos(R41,R42,R43,R44),
    unicos(R11,R21,R31,R41), unicos(R12,R22,R32,R42),
    unicos(R13,R23,R33,R43), unicos(R14,R24,R34,R44).
